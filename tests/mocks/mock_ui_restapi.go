// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/ui/restapi.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockIRestAPI is a mock of IRestAPI interface
type MockIRestAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIRestAPIMockRecorder
}

// MockIRestAPIMockRecorder is the mock recorder for MockIRestAPI
type MockIRestAPIMockRecorder struct {
	mock *MockIRestAPI
}

// NewMockIRestAPI creates a new mock instance
func NewMockIRestAPI(ctrl *gomock.Controller) *MockIRestAPI {
	mock := &MockIRestAPI{ctrl: ctrl}
	mock.recorder = &MockIRestAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIRestAPI) EXPECT() *MockIRestAPIMockRecorder {
	return m.recorder
}

// ListenAndServe mocks base method
func (m *MockIRestAPI) ListenAndServe() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenAndServe")
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenAndServe indicates an expected call of ListenAndServe
func (mr *MockIRestAPIMockRecorder) ListenAndServe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenAndServe", reflect.TypeOf((*MockIRestAPI)(nil).ListenAndServe))
}

// Shutdown mocks base method
func (m *MockIRestAPI) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockIRestAPIMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockIRestAPI)(nil).Shutdown))
}

// ServeHTTP mocks base method
func (m *MockIRestAPI) ServeHTTP(w http.ResponseWriter, req *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", w, req)
}

// ServeHTTP indicates an expected call of ServeHTTP
func (mr *MockIRestAPIMockRecorder) ServeHTTP(w, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockIRestAPI)(nil).ServeHTTP), w, req)
}
